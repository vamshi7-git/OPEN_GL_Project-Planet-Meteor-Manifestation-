#include <GL/glut.h>
#include <vector>
#include <cmath>
#include<string.h>
 
struct Particle {
    float x;
    float y;
    float r;
    float vx;
    float vy;
    float m;
    float color[3];
};
 
void timer(int = 0);
void welcomeDisplay();
void display();
void mouse(int, int, int, int);
void addParticle(float, float, bool = true, float = 0, float = 0);
void removeParticles();
void keyboard(unsigned char, int, int);

int i;
int Mx, My, WIN;
int xc = 0, yc = 0;
int radius1 = 100,radius2=200;
bool PRESSED_LEFT = false, PRESSED_RIGHT = false,
     PRESSED_MIDDLE = false, SPEED_PARTICLES = false;
 
std::vector<Particle> particles;
 

void timer(int)
{
    display();
    if(PRESSED_LEFT)
    {
        addParticle(8, 6); // add tiny particle
        PRESSED_LEFT = false;
    }
 
    if(PRESSED_RIGHT)
    {
        addParticle(10000, 25, 0); // add huge particle
        PRESSED_RIGHT = false;
    }
 
    if(PRESSED_MIDDLE)
        removeParticles(); // remove all particles
 
    for(int i = 0; i < particles.size(); i++)
    {
        Particle &p = particles[i];
        bool not_fall = true;
        for(int j = 0; j < particles.size(); j++)
        {
            if(j == i || p.m >= 10000) // we consider the 10000 as infinit (big mass) so this particles won't move
                continue;
 
            const Particle &p1 = particles[j];
 
            float d = sqrt((p1.x - p.x)*(p1.x - p.x) + (p1.y - p.y)*(p1.y - p.y));
 
            if(d > p1.r)
            {
                p.vx += 0.03 * p1.m / (d*d) * (p1.x - p.x)/d; //f = ma => a = f/m
                p.vy += 0.03 * p1.m / (d*d) * (p1.y - p.y)/d;
            }
            else
                not_fall = false;
        }
 
        if(not_fall)    
        {
            p.x += p.vx;
            p.y += p.vy;
        }
        else
            particles.erase(particles.begin()+i);
    }
 
    glutTimerFunc(1, timer, 0);
}


void welcomeDisplay()
{
glClear(GL_COLOR_BUFFER_BIT| GL_DEPTH_BUFFER_BIT); //
glDisable( GL_LIGHTING );
glColor3f(1,0,0);
glRasterPos3f(-240,-200,0);
char msg1[] = "Manglore Institute Of Technology and Engineering";
for(i = 0;i < strlen(msg1);i++)
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,msg1[i]);

glColor3f(0.7,0,1);
glRasterPos3f(-240,-150,0);
char msg2[] = "Department Of Computer Science And Engineering";
for(i = 0;i < strlen(msg2);i++)
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,msg2[i]);

glColor3f(1,0,0);
glRasterPos3f(-140,-100,0);
char msg0[] = "Computer Graphics Laboratory";
for(i = 0;i < strlen(msg0);i++)
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,msg0[i]);


glColor3f(1,0.5,0);
glRasterPos3f(-120,-50,0);
char msg3[] = "A MINI PROJECT ON";
for(i = 0;i < strlen(msg3);i++)
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,msg3[i]);

glColor3f(1,0,0);
glRasterPos3f(-160,-10,0);
char msg4[] = "Planet & Meteor Manifestation";
for(i = 0;i < strlen(msg4);i++)
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,msg4[i]);

glColor3f(1,0.5,0);
glRasterPos3f(-180,60,0);
char msg5[] = "BY:";
for(i = 0;i < strlen(msg5);i++)
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,msg5[i]);

glColor3f(0.5,0,0.5);
glRasterPos3f(-230,100,0);
char msg6[] = "Vamshi Krishna";
for(i = 0;i < strlen(msg6);i++)
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,msg6[i]);

glColor3f(0.5,0,0.5);
glRasterPos3f(-220,130,0);
char msg7[] = "Sayed Saliq";
for(i = 0;i < strlen(msg7);i++)
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,msg7[i]);

glColor3f(1,0.5,0);
glRasterPos3f(60,60,0);
char msg8[] = "GUIDES:";
for(i = 0;i < strlen(msg8);i++)
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,msg8[i]);

glColor3f(0.5,0.2,0.2);
glRasterPos3f(30,100,0);
char msg9[] = "Ms.Aishwarya Bhat";
for(i = 0;i < strlen(msg9);i++)
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,msg9[i]);

glColor3f(0.5,0.2,0.2);
glRasterPos3f(30,130,0);
char msg11[] = "Ms.Sunitha";
for(i = 0;i < strlen(msg11);i++)
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,msg11[i]);

glColor3f(1,0.1,1);
glRasterPos3f(-130,210,0);
char msg10[] = "PRESS ENTER TO START";
for(i = 0;i < strlen(msg10);i++)
glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,msg10[i]);
glutSwapBuffers();
}

 
void display()
{
    glClear(GL_COLOR_BUFFER_BIT);

    //draw particles
    for(int i = 0; i < particles.size(); i++)
    {
        Particle &p = particles[i];
        glColor3f(p.color[0], p.color[1], p.color[2]);
        glBegin(GL_POLYGON);
        for(float a = 0; a < 2*M_PI; a+=0.2)
            glVertex2f(p.r*cos(a) + p.x, p.r*sin(a) + p.y);
        glEnd();    
    }
   
glColor3f(1.0,1.0,1.0);
glPointSize(2.0);
glBegin(GL_POINTS);

glVertex2f(100.0, -100.0);
glVertex2f(-100.0, -150.0);
glVertex2f(-100.0, -210.0);
glVertex2f(-200.0, -200.0);
glVertex2f(-230.0, -230.0);
glVertex2f(120.0, -190.0);
glVertex2f(-100.0, 100.0);
glVertex2f(-170.0, 120.0);
glVertex2f(-200.0, 200.0);
glVertex2f(-165.0, 160.0);
glVertex2f(-120.0, -120.0);
glVertex2f(-150.0, -80.0);
glVertex2f(-100.0, -20.0);
glVertex2f(-200.0, -100.0);
glVertex2f(-210.0, -200.0);
glVertex2f(-150.0, -100.0);
glVertex2f(-100.0, 50.0);
glVertex2f(-190.0, 100.0);


glVertex2f(10.0,   -100.0);
glVertex2f(20.0,   -150.0);
glVertex2f(30.0,   -210.0);
glVertex2f(40.0,   -200.0);
glVertex2f(50.0,   -230.0);
glVertex2f(60.0,   -190.0);
glVertex2f(70.0,    100.0);
glVertex2f(80.0,    120.0);
glVertex2f(90.0,    200.0);
glVertex2f(100.0,   160.0);
glVertex2f(-110.0, -120.0);
glVertex2f(-120.0,  -80.0);
glVertex2f(-130.0, - 20.0);
glVertex2f(-140.0, -100.0);
glVertex2f(-150.0, -200.0);
glVertex2f(-160.0, -100.0);
glVertex2f(-170.0,   50.0);
glVertex2f(-180.0,  100.0);

glVertex2f(10.0,     80.0);
glVertex2f(60.0,     20.0);
glVertex2f(50.0,     60.0);
glVertex2f(20.0,     90.0);
glVertex2f(90.0,     30.0);
glVertex2f(55.0,     40.0);
glVertex2f(75.0,     10.0);
glVertex2f(14.0,     20.0);
glVertex2f(96.0,    180.0);
glVertex2f(100.0,   170.0);
glVertex2f(-110.0, -160.0);
glVertex2f(-120.0,  -10.0);
glVertex2f(-130.0, -900.0);
glVertex2f(-140.0,  -45.0);
glVertex2f(-150.0,  -12.0);
glVertex2f(-160.0,  -76.0);
glVertex2f(-170.0,  -84.0);
glVertex2f(-180.0,  -90.0);

glVertex2f(-100.0, -100.0);
glVertex2f(-100.0, -150.0);
glVertex2f(-100.0, -210.0);
glVertex2f(-200.0, -200.0);
glVertex2f(-230.0, -230.0);
glVertex2f(-120.0, -190.0);
glVertex2f(-100.0,  100.0);
glVertex2f(170.0,   120.0);
glVertex2f(200.0,   200.0);
glVertex2f(165.0,   160.0);
glVertex2f(120.0,  -120.0);
glVertex2f(150.0,   -80.0);
glVertex2f(100.0,   -20.0);
glVertex2f(200.0,  -100.0);
glVertex2f(210.0,  -200.0);
glVertex2f(150.0,  -100.0);
glVertex2f(100.0,    50.0);
glVertex2f(190.0,   100.0);

glVertex2f(-100.0, 100.0);
glVertex2f(-100.0, 150.0);
glVertex2f(-100.0, 210.0);
glVertex2f(-200.0, 200.0);
glVertex2f(-230.0, 230.0);
glVertex2f(-120.0, 190.0);
glVertex2f(-100.0, 100.0);
glVertex2f(170.0,  120.0);
glVertex2f(200.0,  200.0);
glVertex2f(165.0,  160.0);
glVertex2f(120.0,  120.0);
glVertex2f(150.0,   80.0);
glVertex2f(100.0,   20.0);
glVertex2f(200.0,  100.0);
glVertex2f(210.0,  200.0);
glVertex2f(150.0,  100.0);
glVertex2f(100.0,   50.0);
glVertex2f(190.0,  100.0);

glVertex2f(100.0, 100.0);
glVertex2f(100.0, 150.0);
glVertex2f(100.0, 210.0);
glVertex2f(200.0, 200.0);
glVertex2f(230.0, 230.0);
glVertex2f(120.0, 190.0);
glVertex2f(100.0, 100.0);
glVertex2f(-170.0,120.0);
glVertex2f(-200.0,200.0);
glVertex2f(-165.0,160.0);
glVertex2f(-120.0,120.0);
glVertex2f(-150.0, 80.0);
glVertex2f(-100.0, 20.0);
glVertex2f(-200.0,100.0);
glVertex2f(-210.0,200.0);
glVertex2f(-150.0,100.0);
glVertex2f(-100.0, 50.0);
glVertex2f(-190.0,100.0);

glVertex2f(-10.0, -100.0);
glVertex2f(-20.0, -150.0);
glVertex2f(-30.0, -210.0);
glVertex2f(-40.0, -200.0);
glVertex2f(-50.0, -230.0);
glVertex2f(-60.0, -190.0);
glVertex2f(-70.0,  100.0);
glVertex2f(-80.0,  120.0);
glVertex2f(-90.0,  200.0);
glVertex2f(-100.0, 160.0);
glVertex2f(110.0, -120.0);
glVertex2f(120.0,  -80.0);
glVertex2f(130.0,  -20.0);
glVertex2f(140.0, -100.0);
glVertex2f(150.0, -200.0);
glVertex2f(160.0, -100.0);
glVertex2f(170.0,   50.0);
glVertex2f(180.0,  100.0);

glVertex2f(10.0,  -100.0);
glVertex2f(20.0,  -150.0);
glVertex2f(30.0,  -210.0);
glVertex2f(40.0,  -200.0);
glVertex2f(50.0,  -230.0);
glVertex2f(60.0,  -190.0);
glVertex2f(70.0,   100.0);
glVertex2f(80.0,   120.0);
glVertex2f(90.0,   200.0);
glVertex2f(100.0,  160.0);
glVertex2f(-110.0,-120.0);
glVertex2f(-120.0, -80.0);
glVertex2f(-130.0, -20.0);
glVertex2f(-140.0,-100.0);
glVertex2f(-150.0,-200.0);
glVertex2f(-160.0,-100.0);
glVertex2f(-170.0,  50.0);
glVertex2f(-180.0, 100.0);

glVertex2f(-10.0,  100.0);
glVertex2f(-20.0,  150.0);
glVertex2f(-30.0,  210.0);
glVertex2f(-40.0,  200.0);
glVertex2f(-50.0,  230.0);
glVertex2f(-60.0,  190.0);
glVertex2f(-70.0, -100.0);
glVertex2f(-80.0, -120.0);
glVertex2f(-90.0, -200.0);
glVertex2f(-100.0,-160.0);
glVertex2f(110.0,  120.0);
glVertex2f(120.0,   80.0);
glVertex2f(130.0,   20.0);
glVertex2f(140.0,  100.0);
glVertex2f(150.0,  200.0);
glVertex2f(160.0,  100.0);
glVertex2f(170.0,   50.0);
glVertex2f(180.0,  100.0);

glVertex2f(10.0,    100.0);
glVertex2f(20.0,    150.0);
glVertex2f(30.0,    210.0);
glVertex2f(40.0,    200.0);
glVertex2f(50.0,    230.0);
glVertex2f(60.0,    190.0);
glVertex2f(70.0,   -100.0);
glVertex2f(80.0,   -120.0);
glVertex2f(90.0,   -200.0);
glVertex2f(100.0,  -160.0);
glVertex2f(-110.0,  120.0);
glVertex2f(-120.0,   80.0);
glVertex2f(-130.0,   20.0);
glVertex2f(-140.0,  100.0);
glVertex2f(-150.0,  200.0);
glVertex2f(-160.0,  100.0);
glVertex2f(-170.0,  -50.0);
glVertex2f(-180.0, -100.0);
glVertex2f(-190.0,  120.0);
glVertex2f(-200.0,   80.0);
glVertex2f(-210.0,   20.0);
glVertex2f(-220.0,  100.0);
glVertex2f(-230.0,  200.0);
glVertex2f(-240.0,  100.0);
glVertex2f(240.0,   -50.0);
glVertex2f(230.0,  -100.0);
glEnd();

  int x=0;
  int y=radius1 ;
  float pk=(5.0/4.0)-radius1;

  /* Plot the points */
  /* Plot the first point */
    glColor3f(1.0,1.0,1.0);
    glBegin(GL_POINTS);
    glVertex2i(xc+x, yc+y);
    glVertex2i(xc+x, yc-y);
    glVertex2i(xc+y, yc+x);
    glVertex2i(xc+y, yc-x);
    glVertex2i(xc-x, yc-y);
    glVertex2i(xc-y, yc-x);
    glVertex2i(xc-x, yc+y);
    glVertex2i(xc-y, yc+x);
    glEnd();
  int k;
  /* Find all vertices till x=y */
  while(x < y)
  {
    x = x + 1;
    if(pk < 0)
      pk = pk + 2*x+1;
    else
    {
      y = y - 1;
      pk = pk + 2*(x - y) + 1;
    }
    glColor3f(1.0,0.0,0.0);
    glBegin(GL_POINTS);
    glVertex2i(xc+x, yc+y);
    glVertex2i(xc+x, yc-y);
    glVertex2i(xc+y, yc+x);
    glVertex2i(xc+y, yc-x);
    glVertex2i(xc-x, yc-y);
    glVertex2i(xc-y, yc-x);
    glVertex2i(xc-x, yc+y);
    glVertex2i(xc-y, yc+x);
    glEnd();
  }
 
  int x1=0;
  int y1=radius2 ;
  float pk1=(5.0/4.0)-radius2;

  /* Plot the points */
  /* Plot the first point */
    glColor3f(1.0,1.0,1.0);
    glBegin(GL_POINTS);
    glVertex2i(xc+x1, yc+y1);
    glVertex2i(xc+x1, yc-y1);
    glVertex2i(xc+y1, yc+x1);
    glVertex2i(xc+y1, yc-x1);
    glVertex2i(xc-x1, yc-y1);
    glVertex2i(xc-y1, yc-x1);
    glVertex2i(xc-x1, yc+y1);
    glVertex2i(xc-y1, yc+x1);
    glEnd();
  int k1;
  /* Find all vertices till x=y */
  while(x1 < y1)
  {
    x1 = x1 + 1;
    if(pk1 < 0)
      pk1 = pk1 + 2*x1+1;
    else
    {
      y1 = y1 - 1;
      pk1 = pk1 + 2*(x1 - y1) + 1;
    }
    glColor3f(1.0,0.0,0.0);
    glBegin(GL_POINTS);
    glVertex2i(xc+x1, yc+y1);
    glVertex2i(xc+x1, yc-y1);
    glVertex2i(xc+y1, yc+x1);
    glVertex2i(xc+y1, yc-x1);
    glVertex2i(xc-x1, yc-y1);
    glVertex2i(xc-y1, yc-x1);
    glVertex2i(xc-x1, yc+y1);
    glVertex2i(xc-y1, yc+x1);
    glEnd();
  }

    glFlush();
    glutSwapBuffers();
}


void mouse(int button, int state, int x, int y)
{
    //set the coordinates
    Mx = x - 250;
    My = y - 250;
 
   //check which button is pressed
   
    if(button == GLUT_LEFT_BUTTON)
        PRESSED_LEFT = state == GLUT_DOWN;
    else if(button == GLUT_RIGHT_BUTTON)
        PRESSED_RIGHT = state == GLUT_DOWN;
    else if(button == GLUT_MIDDLE_BUTTON)
        PRESSED_MIDDLE = state == GLUT_DOWN;
}
 
 
 
void addParticle(float m, float r, bool randColor, float vx, float vy)
{
    Particle p;
    p.x = Mx;
    p.y = My;
    p.m = m;
    p.r = r;
    if(randColor)
    {
        p.color[0] = rand()%200 / 200.0;
        p.color[1] = rand()%200 / 200.0;
        p.color[2] = rand()%200 / 200.0;
    }
    else // if is huge particle make it blue
    {
        p.color[0] = 0;
        p.color[1] = 0;
        p.color[2] = 1;
    }
    particles.push_back(p);
 
   
}


void removeParticles()
{
    for(int i = 0; i < particles.size(); i++)
        particles.pop_back();
}


void keyboard(unsigned char key, int x, int y)
{
    if(key==13)
    {
glutDisplayFunc(display);
timer();
}
    glutPostRedisplay();
}


int main(int argc, char **argv)
{
    Particle p;
   
    //initial centered Huge mass particle
   
    p.x = 0;
    p.y = 0;
    p.vx = p.vy = 0;
    p.m = 10000;
    p.r = 25;
    p.color[0] = 0;
    p.color[1] = 0;
    p.color[2] = 1;
    particles.push_back(p);
 
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(530, 530);
    glutInitWindowPosition(50, 50);
    WIN = glutCreateWindow("Planets & Meteor");
 
    glClearColor(0, 0, 0, 1);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-250.0, 250.0, 250.0, -250.0, 0, 1);
   
    glutDisplayFunc(welcomeDisplay);
    glutKeyboardFunc(keyboard);
    glutMouseFunc(mouse);
   
    glutMainLoop();
    return 0;
}
